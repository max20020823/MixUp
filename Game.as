package {		import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.text.TextField;	import flash.utils.setTimeout;	import flash.utils.Timer;		/**	 * PRIMARY CLASS FOR MANAGING GAME STATUS AND RETAINING GAME HISTORY	 */		public class Game extends MovieClip {				static public const GAME_OVER:String = "gameOver";				public var piecesLeftText:TextField;		public var movesMadeText:TextField;		public var timeElapsedText:TextField;		public var quitButton:SimpleButton;				private var _sourceImage:ISourceImage;		private var _gameBoard:GameBoard;		private var _totalPieces:int;		private var _piecesLeft:int;		private var _movesMade:int;		private var _timeElapsed:int;		private var _timer:Timer;				public function Game() {			addEventListener(Event.ADDED_TO_STAGE, addedToStage, false, 0, true);			_timer = new Timer(1000);			_timer.addEventListener(TimerEvent.TIMER, timerUpdate, false, 0, true);		}					private function addedToStage(e:Event):void {			quitButton.addEventListener(MouseEvent.CLICK, gameOver, false, 0, true);		}				public function get movesMade():int { return _movesMade; }		public function set movesMade(value:int):void {			_movesMade = value;			movesMadeText.text = String(_movesMade);		}				public function get piecesLeft():int { return _piecesLeft; }		public function set piecesLeft(value:int):void {			_piecesLeft = value;			piecesLeftText.text = String(_piecesLeft);		}				public function get timeElapsed():int { return _timeElapsed; }		public function set timeElapsed(value:int):void {			_timeElapsed = value;			var timeString:String;			if (_timeElapsed < 60) {				timeString = "0:";			} else {				timeString = String(Math.floor(_timeElapsed / 60)) + ":";			}			var seconds:int = _timeElapsed % 60;			if (seconds < 10) {				timeString += "0" + String(seconds);			} else {				timeString += String(seconds);			}			timeElapsedText.text = timeString;		}				public function init(sourceImage:ISourceImage,							rows:int,							columns:int,							imageWidth:int = 0,							imageHeight:int = 0,							boardPosition:Point = null):void {			_totalPieces = piecesLeft = rows * columns;			movesMade = 0;			_sourceImage = sourceImage;			_gameBoard = new GameBoard(_sourceImage, GamePiece, rows, columns, imageWidth, imageHeight);			if (!boardPosition) boardPosition = new Point();			_gameBoard.x = boardPosition.x;			_gameBoard.y = boardPosition.y;			_gameBoard.createBoard();			addChildAt(_gameBoard, 0);			_gameBoard.shuffleBoard();		}				public function startGame():void {			_gameBoard.activate();			_gameBoard.addEventListener(GameBoard.GAME_OVER, pauseBeforeGameOver, false, 0, true);			_gameBoard.addEventListener(GameBoard.PIECE_SWAP, pieceSwap, false, 0, true);			_gameBoard.addEventListener(GameBoard.PIECE_LOCK, pieceLock, false, 0, true);			timeElapsed = 0;			_timer.start();		}				private function pauseBeforeGameOver(e:Event):void {			_timer.stop();			setTimeout(gameOver, 2000, null);		}				private function pieceSwap(e:Event):void {			movesMade++;		}				private function pieceLock(e:Event):void {			piecesLeft--;		}				private function gameOver(e:Event):void {			_timer.stop();			_gameBoard.deactivate();			_gameBoard.cleanUp();			dispatchEvent(new Event(GAME_OVER));		}				private function timerUpdate(e:TimerEvent):void {			timeElapsed = _timer.currentCount;		}			}	}