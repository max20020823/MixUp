package {		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.utils.setTimeout;	import gs.easing.Expo;	import gs.TweenLite;		/**	 * PRIMARY CLASS FOR MANAGING GAME STATUS AND RETAINING GAME HISTORY	 */		public class GamePiece extends Sprite implements IGamePiece {				protected var _image:Bitmap;		protected var _index:int;		protected var _currentIndex:int;		protected var _rolloverHighlight:Shape;		protected var _clickHighlight:Shape;				public function GamePiece() {		}				protected function createRolloverHighlight():void {			_rolloverHighlight = new Shape();			_rolloverHighlight.graphics.lineStyle(1, 0xFFFFFF, 1);			_rolloverHighlight.graphics.beginFill(0xFFFFFF, .3);			_rolloverHighlight.graphics.drawRect(.5, .5, _image.width-1, _image.height-1);			_rolloverHighlight.graphics.endFill();			addChild(_rolloverHighlight);			_rolloverHighlight.visible = false;		}				protected function createClickHighlight():void {			_clickHighlight = new Shape();			_clickHighlight.graphics.lineStyle(2, 0, 1);			_clickHighlight.graphics.beginFill(0xFFFFFF, .2);			_clickHighlight.graphics.drawRect(1, 1, _image.width-2, _image.height-2);			_clickHighlight.graphics.endFill();			addChild(_clickHighlight);			_clickHighlight.visible = false;		}				public function get index():int { return _index; }				public function set index(value:int):void {			_index = value;		}				public function get currentIndex():int { return _currentIndex; }				public function set currentIndex(value:int):void {			_currentIndex = value;		}				public function get image():BitmapData { return _image.bitmapData; }				public function set image(value:BitmapData):void {			if (!_image) {				_image = new Bitmap(value);				addChild(_image);				createRolloverHighlight();				createClickHighlight();			}			else _image.bitmapData = value;		}				protected function onClick(e:MouseEvent):void {			select();		}				protected function onRollOver(e:MouseEvent):void {			_rolloverHighlight.visible = true;		}				protected function onRollOut(e:MouseEvent):void {			_rolloverHighlight.visible = false;		}				public function select():void {			_clickHighlight.visible = true;		}				public function deselect():void {			_clickHighlight.visible = false;		}				public function activate():void {			addEventListener(MouseEvent.CLICK, onClick, false, 1, true);			addEventListener(MouseEvent.ROLL_OVER, onRollOver, false, 0, true);			addEventListener(MouseEvent.ROLL_OUT, onRollOut, false, 0, true);			buttonMode = true;		}				public function deactivate():void {			removeEventListener(MouseEvent.CLICK, onClick);			removeEventListener(MouseEvent.ROLL_OVER, onRollOver);			removeEventListener(MouseEvent.ROLL_OUT, onRollOut);			buttonMode = false;			_rolloverHighlight.visible = false;			deselect();		}				public function lock():void {			deactivate();			setTimeout(pieceLockAnimation, 500);		}				public function movePiece(newX:Number, newY:Number):void {			TweenLite.to(this, .5, { x:newX, y:newY, ease:Expo.easeOut } );		}				protected function pieceLockAnimation():void {			var shape:Shape = new Shape();			shape.graphics.beginFill(0x00CC00, .5);			shape.graphics.drawCircle(0, 0, Math.max(width, height)/2);			shape.graphics.endFill();			shape.x = width / 2;			shape.y = height / 2;			addChild(shape);			TweenLite.to(shape, 1, { scaleX:2, scaleY:2, alpha:0, onComplete:removeChild, onCompleteParams:[shape]} );			parent.setChildIndex(this, parent.numChildren - 1);		}				override public function toString():String {			return "GamePiece: index = " + index + " , currentIndex = " + currentIndex;		}	}	}