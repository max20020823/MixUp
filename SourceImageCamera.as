package {		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Matrix;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.media.Camera;	import flash.media.Video;			public class SourceImageCamera extends Sprite implements ISourceImage {				protected var _rows:int, _columns:int;		protected var _video:Video;		protected var _camera:Camera;		protected var _sourceBitmap:BitmapData;		protected var _pieceList:Vector.<BitmapData>;				public function SourceImageCamera(width:int, height:int, fps:int = 15) {			_camera = Camera.getCamera();			_video = new Video(width, height);			_camera.setMode(width, height, fps);			_video.attachCamera(_camera);		}					public function getImages(rows:int, columns:int, width:int = 0, height:int = 0):Vector.<BitmapData> {			if (_pieceList) return _pieceList;			if (width == 0) width = _video.width;			if (height == 0) height = _video.height;			_rows = rows;			_columns = columns;			//CREATE SOURCE BITMAP			_sourceBitmap = new BitmapData(width, height);			_sourceBitmap.draw(_video, new Matrix());			var pieceBitmap:BitmapData;			var pieceWidth:int = Math.floor(_sourceBitmap.width / _columns);			var pieceHeight:int = Math.floor(_sourceBitmap.height / _rows);			_pieceList = new Vector.<BitmapData>();			for (var j:int = 0; j < _rows; j++) {				for (var i:int = 0; i < _columns; i++) {					pieceBitmap = new BitmapData(pieceWidth, pieceHeight);					var rect:Rectangle = new Rectangle(i * pieceWidth, j * pieceHeight, pieceWidth, pieceHeight);					pieceBitmap.copyPixels(_sourceBitmap, rect, new Point());					_pieceList.push(pieceBitmap);				}			}			addEventListener(Event.ENTER_FRAME, updateImages, false, 0, true);			return _pieceList;		}				protected function updateImages(e:Event):void {			_sourceBitmap.dispose();			_sourceBitmap = new BitmapData(_video.width, _video.height);			_sourceBitmap.draw(_video);			var pieceBitmap:BitmapData;			var pieceWidth:int = Math.floor(_sourceBitmap.width / _columns);			var pieceHeight:int = Math.floor(_sourceBitmap.height / _rows);			for (var j:int = 0; j < _rows; j++) {				for (var i:int = 0; i < _columns; i++) {					pieceBitmap = _pieceList[i + (j * _columns)];					var rect:Rectangle = new Rectangle(i * pieceWidth, j * pieceHeight, pieceWidth, pieceHeight);					pieceBitmap.copyPixels(_sourceBitmap, rect, new Point());				}			}		}				public function cleanUp():void {			for each (var bmd:BitmapData in _pieceList) {				bmd.dispose();			}			removeEventListener(Event.ENTER_FRAME, updateImages);			_pieceList = null;		}				public function destroy():void {			cleanUp();			_sourceBitmap.dispose();			_video = null;			_camera = null;		}	}	}